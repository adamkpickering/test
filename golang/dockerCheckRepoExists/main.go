// Generated by gemini 2.5 pro
package main

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"time"
)

// Response matches the top-level structure of the Docker Hub API response.
// We only need the 'next' URL for pagination and the 'results' array.
type Response struct {
	Next    string       `json:"next"`
	Results []Repository `json:"results"`
}

// Repository matches the structure of a repository object in the 'results' array.
// We only need the 'name' of the repository.
type Repository struct {
	Name string `json:"name"`
}

func main() {
	// Using a client allows for more control, such as setting a request timeout.
	client := &http.Client{
		Timeout: 30 * time.Second,
	}

	// This slice will accumulate all repository names from every page.
	var allRepos []string

	// Start with the initial URL, using the maximum page size to minimize requests.
	nextURL := "https://hub.docker.com/v2/namespaces/rancher/repositories?page_size=100"

	fmt.Println("Fetching all repositories for the 'rancher' organization...")

	// Loop as long as there is a 'next' URL provided by the API.
	for nextURL != "" {
		fmt.Printf("-> Fetching page: %s\n", nextURL)

		// Create and send the HTTP GET request.
		req, err := http.NewRequest("GET", nextURL, nil)
		if err != nil {
			fmt.Printf("Error creating request: %v\n", err)
			return
		}

		resp, err := client.Do(req)
		if err != nil {
			fmt.Printf("Error executing request: %v\n", err)
			return
		}
		defer resp.Body.Close()

		// Check for a successful status code.
		if resp.StatusCode != http.StatusOK {
			fmt.Printf("Error: Received non-200 status code: %d\n", resp.StatusCode)
			return
		}

		// Read the entire response body.
		body, err := io.ReadAll(resp.Body)
		if err != nil {
			fmt.Printf("Error reading response body: %v\n", err)
			return
		}

		// Unmarshal the JSON into our Go structs.
		var apiResponse Response
		if err := json.Unmarshal(body, &apiResponse); err != nil {
			fmt.Printf("Error unmarshalling JSON: %v\n", err)
			return
		}

		// Append the names of the repositories from the current page to our master list.
		for _, repo := range apiResponse.Results {
			allRepos = append(allRepos, repo.Name)
		}

		// The URL for the next iteration is the 'next' field from the current response.
		// If 'next' is an empty string or null, the loop will terminate.
		nextURL = apiResponse.Next
	}

	fmt.Printf("\nâœ… Success! Found a total of %d repositories.\n", len(allRepos))

	// Uncomment the following lines to print the full list of repository names.
	fmt.Println("\n--- Repository List ---")
	for i, name := range allRepos {
		fmt.Printf("%d. %s\n", i+1, name)
	}
}
